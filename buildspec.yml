version: 0.2

proxy:
  upload-artifacts: no | yes
  logs: no | yes

batch:
  fast-fail: false | true
  # build-list:
  # build-matrix:
  # build-graph:

phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - echo "Installing dependencies..."
      - pip install -r requirements.txt -t lib
 pre_build:
    on-failure: ABORT
    commands:
      - python test_model.py
      - command
  build:
    on-failure: ABORT
    commands:
      - command
      - command
  post_build:
    on-failure: ABORT
    commands:
      - command
      - command
reports:
  report-group-name-or-arn:
    files:
      - location
      - location
    base-directory: location
    discard-paths: no | yes
    file-format: report-format
artifacts:
  files:
    - location
    - location
  name: artifact-name
  discard-paths: no | yes
  base-directory: location
  exclude-paths: excluded paths
  enable-symlinks: no | yes
  s3-prefix: prefix
  secondary-artifacts:
    artifactIdentifier:
      files:
        - location
        - location
      name: secondary-artifact-name
      discard-paths: no | yes
      base-directory: location
    artifactIdentifier:
      files:
        - location
        - location
      discard-paths: no | yes
      base-directory: location
cache:
  paths:
    - path
    - path

steps:

    # Download Incoming Model
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args: ['gsutil', 'cp', 'gs://au-dttl-modelops-models-artifacts/1-incoming/${_MODEL_FILE}', '${_MODEL_FILE}']

   # Download Test Data
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args: ['gsutil', 'cp', 'gs://au-dttl-mlops-data-demo/${_TEST_FILE}', '${_TEST_FILE}']

  # Install dependencies
  - name: 'devashishupadhyay/scikit-learn-docker'
    entrypoint: pip
    args: ["install", "-r", "requirements.txt", "--user"]

  # Run Python Test Case
  # test_model.py expects a configuration json file in the same directory and will output model_metrics.json
  - name: 'devashishupadhyay/scikit-learn-docker'
    entrypoint: python3
    args: ['test_model.py', '${_MODEL_FILE}', '${_TEST_FILE}', 'configuration.json', 'model_metrics.json']

  # Upload model to archive
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args: ['gsutil', 'cp', '${_MODEL_FILE}', 'gs://au-dttl-modelops-models-artifacts/2-archive/${BUILD_ID}/${_MODEL_FILE}']

  # Upload metrics file to archive
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args: ['gsutil', 'cp', 'model_metrics.json', 'gs://au-dttl-modelops-models-artifacts/2-archive/${BUILD_ID}/model_metrics.json']

  # Upload model to live folder
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args: ['gsutil', 'cp', '${_MODEL_FILE}', 'gs://au-dttl-modelops-models-artifacts/3-live/${_MODEL_FILE}']
